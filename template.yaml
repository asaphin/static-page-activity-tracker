AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  static-page-activity-tracker
  
  Sample SAM Template for static-page-activity-tracker

Parameters:
  Environment:
    Description: 'Environment'
    Type: String
    AllowedPattern: '[a-z]+'
    Default: dev

  AppName:
    Description: 'Application name'
    Type: String
    AllowedPattern: '[a-z-]+'
    Default: activity-tracker


Globals:
  Function:
    Timeout: 5
    MemorySize: 128

Resources:
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub '${Environment}-${AppName}-api-gateway'
      StageName: prod
      OpenApiVersion: 3.0.3
      EndpointConfiguration: REGIONAL
      Auth:
        ResourcePolicy:
          CustomStatements: {
            Effect: 'Allow',
            Action: 'execute-api:Invoke',
            Resource: [ 'execute-api:/*/*/*' ],
            Principal: '*'
          }
#        DefaultAuthorizer: 'LambdaDomainAuthorizer'
#        Authorizers:
#          LambdaDomainAuthorizer:
#            FunctionArn: !GetAtt AuthorizeDomainFunction.Arn
      Cors:
        AllowMethods: "'OPTIONS,GET,POST,PUT,DELETE'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      GatewayResponses:
        BAD_REQUEST_BODY:
          StatusCode: 400
          ResponseTemplates:
            "application/json": '{ "statusCode": "BadRequestError", "errorMessage": "$context.error.validationErrorString" }'
          ResponseParameters:
            Headers:
              Access-Control-Allow-Methods: "'OPTIONS,GET,POST,PUT,DELETE'"
              Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              Access-Control-Allow-Origin: "'*'"
        DEFAULT_4xx:
          ResponseTemplates:
            "application/json": '{ "statusCode": "ClientError", "errorMessage": "$context.error.message" }'
          ResponseParameters:
            Headers:
              Access-Control-Allow-Methods: "'OPTIONS,GET,POST,PUT,DELETE'"
              Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              Access-Control-Allow-Origin: "'*'"
        DEFAULT_5xx:
          ResponseTemplates:
            "application/json": '{ "statusCode": "ServerError", "errorMessage": "$context.error.message" }'
          ResponseParameters:
            Headers:
              Access-Control-Allow-Methods: "'OPTIONS,GET,POST,PUT,DELETE'"
              Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              Access-Control-Allow-Origin: "'*'"
      DefinitionBody:
        Fn::Transform:
          Name: 'AWS::Include'
          Parameters:
            Location: './gateway/api-definition.yaml'
      MethodSettings:
        - HttpMethod: '*'
          ResourcePath: '/*'
      Tags:
        environment: !Ref Environment
        application: !Ref AppName

  SaveActivityFunctionExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${Environment}-${AppName}-save-activity-exec-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: 'Allow'
          Action: 'sts:AssumeRole'
          Principal:
            Service: 'lambda.amazonaws.com'
      Path: /
      Policies:
        - PolicyName: 'DDBPutItemAccessPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Effect: 'Allow'
              Action:
                - 'dynamodb:PutItem'
              Resource: !GetAtt ActivityTable.Arn
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Tags:
        - Key: environment
          Value: !Ref Environment
        - Key: application
          Value: !Ref AppName

  SaveActivityFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      FunctionName: !Sub '${Environment}-${AppName}-save-activity-fn'
      CodeUri: cmd/save-activity
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64
      Role: !GetAtt SaveActivityFunctionExecutionRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /activity
            Method: POST
            RestApiId: !Ref ApiGateway
      Environment:
        Variables:
          ACTIVITY_TABLE: !Ref ActivityTable
          LOG_LEVEL: 'DEBUG'
      Tags:
        environment: !Ref Environment
        application: !Ref AppName

#  AuthorizeDomainFunctionExecutionRole:
#    Type: 'AWS::IAM::Role'
#    Properties:
#      RoleName: !Sub '${Environment}-${AppName}-authorize-domain-exec-role'
#      AssumeRolePolicyDocument:
#        Version: '2012-10-17'
#        Statement:
#          Effect: 'Allow'
#          Action: 'sts:AssumeRole'
#          Principal:
#            Service: 'lambda.amazonaws.com'
#      Path: /
#      Policies:
#        - PolicyName: 'DDBQueryAccessPolicy'
#          PolicyDocument:
#            Version: '2012-10-17'
#            Statement:
#              Effect: 'Allow'
#              Action:
#                - 'dynamodb:Query'
#              Resource: !GetAtt DictionariesTable.Arn
#      ManagedPolicyArns:
#        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
#      Tags:
#        - Key: environment
#          Value: !Ref Environment
#        - Key: application
#          Value: !Ref AppName
#
#  AuthorizeDomainFunction:
#    Type: AWS::Serverless::Function
#    Metadata:
#      BuildMethod: go1.x
#    Properties:
#      FunctionName: !Sub '${Environment}-${AppName}-authorize-domain-fn'
#      CodeUri: cmd/authorize-domain
#      Handler: bootstrap
#      Runtime: provided.al2
#      Architectures:
#        - x86_64
#      Role: !GetAtt AuthorizeDomainFunctionExecutionRole.Arn
#      Environment:
#        Variables:
#          AUTHORIZED_DOMAINS_TABLE: !Ref DictionariesTable
#      Tags:
#        environment: !Ref Environment
#        application: !Ref AppName

  ActivityTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: page
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: N
      KeySchema:
        - AttributeName: page
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      BillingMode: 'PAY_PER_REQUEST'
      TableName: !Sub '${Environment}-${AppName}-activity-table'
      Tags:
        - Key: 'environment'
          Value: !Ref Environment
        - Key: 'application'
          Value: !Ref AppName

#  DictionariesTable:
#    Type: 'AWS::DynamoDB::Table'
#    Properties:
#      AttributeDefinitions:
#        - AttributeName: pk
#          AttributeType: S
#        - AttributeName: sk
#          AttributeType: S
#      KeySchema:
#        - AttributeName: pk
#          KeyType: HASH
#        - AttributeName: sk
#          KeyType: RANGE
#      BillingMode: 'PAY_PER_REQUEST'
#      TableName: !Sub '${Environment}-${AppName}-dictionaries-table'
#      Tags:
#        - Key: 'environment'
#          Value: !Ref Environment
#        - Key: 'application'
#          Value: !Ref AppName

Outputs:
  SaveActivityAPI:
    Description: "API Gateway endpoint URL for Save Activity Function"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/activity"
  SaveActivityFunction:
    Description: "Save Activity Lambda Function ARN"
    Value: !GetAtt SaveActivityFunction.Arn
  SaveActivityFunctionIamRole:
    Description: "Implicit IAM Role created for Save Activity function"
    Value: !GetAtt SaveActivityFunctionExecutionRole.Arn
